generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                @id @default(autoincrement())
  email             String             @unique
  name              String
  age               Int
  gender            String
  username          String             @unique
  password          String
  profile           String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  questions         Question[]
  answers           Answer[]
  answerReactions   AnswerReaction[]
  questionReactions QuestionReaction[]
  userFollowTopic   UserFollowTopic[]
}

model Topic {
  id              Int               @id @default(autoincrement())
  title           String            @unique
  description     String
  picture         String
  QuestionTopic   QuestionTopic[]
  userFollowTopic UserFollowTopic[]
}

model Question {
  id               Int                @id @default(autoincrement())
  body             String
  createdAt        DateTime           @default(now())
  author           User               @relation(fields: [authorId], references: [id])
  authorId         Int
  answers          Answer[]
  QuestionTopic    QuestionTopic[]
  QuestionReaction QuestionReaction[]
  likeCount        Int                @default(0)
}

model QuestionReaction {
  id         Int      @id @default(autoincrement())
  type       String
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  question   Question @relation(fields: [questionId], references: [id])
  questionId Int
}

model QuestionTopic {
  id         Int      @id @default(autoincrement())
  question   Question @relation(fields: [questionId], references: [id])
  questionId Int
  topic      Topic    @relation(fields: [topicId], references: [id])
  topicId    Int
}

model Answer {
  id             Int              @id @default(autoincrement())
  body           String
  createdAt      DateTime         @default(now())
  author         User             @relation(fields: [authorId], references: [id])
  authorId       Int
  question       Question         @relation(fields: [questionId], references: [id])
  questionId     Int
  AnswerReaction AnswerReaction[]
  likeCount      Int              @default(0)
}

model AnswerReaction {
  id       Int    @id @default(autoincrement())
  type     String
  user     User   @relation(fields: [userId], references: [id])
  userId   Int
  answer   Answer @relation(fields: [answerId], references: [id])
  answerId Int
}

model UserFollowTopic {
  id      Int    @id @default(autoincrement())
  type    String
  user    User   @relation(fields: [userId], references: [id])
  userId  Int
  topic   Topic  @relation(fields: [topicId], references: [id])
  topicId Int
}
